---
name: CI

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  format:
    name: Ensure code is properly formatted
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('poetry.lock') }}

      - run: |
          poetry install
          poetry run ./format.sh --check

  ci:
    name: Run the integration tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        container_runtime: ["podman", "docker"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/cache@v3
        with:
          path: ~/.tox
          key: tox-${{ matrix.python_version }}-${{ hashFiles('poetry.lock') }}

      - run: pip install --user --upgrade tox
      - run: |
          export CUR_USER="$(whoami)"
          sudo loginctl enable-linger ${CUR_USER}

      - run: |
          tox -e py${PY_VER//\./} -- -n auto  --reruns 3 --pytest-container-log-level DEBUG
          tox -e py${PY_VER//\./} -- --reruns 3 --pytest-container-log-level DEBUG
        env:
          CONTAINER_RUNTIME: ${{ matrix.container_runtime }}
          PY_VER: ${{ matrix.python_version }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  install:
    name: Build and install the package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ matrix.python_version }}-${{ hashFiles('poetry.lock') }}

      - run: |
          poetry install
          poetry build
          pip install --user dist/pytest_container*whl
          python -c "import pytest_container; print (pytest_container.__name__)"

  documentation:
    name: Build the documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/cache@v3
        with:
          path: ~/.tox
          key: tox-${{ hashFiles('poetry.lock') }}

      - run: pip install --user --upgrade tox

      - run: 'tox -e doc'

  lint:
    name: Lint the source code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/cache@v3
        with:
          path: ~/.tox
          key: tox-${{ hashFiles('poetry.lock') }}

      - run: pip install --user --upgrade tox

      - run: 'tox -e lint'
